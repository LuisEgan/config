{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "Get component props": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "constprops",
    "body": ["const {$1} = props"],
    "description": "const props"
  },

  "useEffect": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ussf",
    "body": ["useEffect( () => {", " ${2}", "}, [${1}])"],
    "description": "const props"
  },

  "reactComponent": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "reactcomponent",
    "body": [
      "const ${1} = () => {",
      "return (",
      "<div>",
      "</div>",
      ")}\n",
      "export default ${1}"
    ],
    "description": "react component with props"
  },

  "reactComponentWithProps": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "reactcomponentprops",
    "body": [
      "interface I${1} { ${3} }\n",
      "const ${1} = (props: I${1}) => {",
      "const { ${2} } = props;\n",
      "return (",
      "<div>",
      "</div>",
      ")}\n",
      "export default ${1}"
    ],
    "description": "react component with props"
  }
}
